# Highly Optimized Production Dockerfile for MegaBlog

# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Stage 2: Builder
FROM node:18-alpine AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Set build-time environment variables
ARG VITE_APPWRITE_URL
ARG VITE_APPWRITE_PROJECT_ID  
ARG VITE_APPWRITE_DATABASE_ID
ARG VITE_APPWRITE_COLLECTION_ID
ARG VITE_APPWRITE_BUCKET_ID

ENV VITE_APPWRITE_URL=$VITE_APPWRITE_URL
ENV VITE_APPWRITE_PROJECT_ID=$VITE_APPWRITE_PROJECT_ID
ENV VITE_APPWRITE_DATABASE_ID=$VITE_APPWRITE_DATABASE_ID
ENV VITE_APPWRITE_COLLECTION_ID=$VITE_APPWRITE_COLLECTION_ID
ENV VITE_APPWRITE_BUCKET_ID=$VITE_APPWRITE_BUCKET_ID

# Build the application
RUN npm run build

# Stage 3: Production runner with Nginx
FROM nginx:1.24-alpine AS runner

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init curl && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nginx-user -u 1001 -G nodejs

# Remove default nginx config
RUN rm /etc/nginx/conf.d/default.conf

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder stage
COPY --from=builder --chown=nginx-user:nodejs /app/dist /usr/share/nginx/html

# Create nginx directories and set permissions
RUN mkdir -p /var/cache/nginx/{client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp} && \
    mkdir -p /var/log/nginx && \
    chown -R nginx-user:nodejs /var/cache/nginx && \
    chown -R nginx-user:nodejs /var/log/nginx && \
    chown -R nginx-user:nodejs /usr/share/nginx/html && \
    chown -R nginx-user:nodejs /etc/nginx/conf.d && \
    # Make nginx.conf readable
    chmod 644 /etc/nginx/conf.d/default.conf

# Switch to non-root user
USER nginx-user

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start nginx
CMD ["nginx", "-g", "daemon off;"] 